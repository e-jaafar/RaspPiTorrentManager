import { 
  Client, 
  GatewayIntentBits, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle,
  EmbedBuilder
} from 'discord.js';
import axios from 'axios';
import { exec } from 'node:child_process';
import fs from 'fs';
import dotenv from 'dotenv';
import path from 'path';
import { QBittorrent } from 'qbit.js';
import FormData from 'form-data';
import QuickChart from 'quickchart-js';
dotenv.config();

const client = new Client({ 
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.DirectMessageReactions
  ]
});

// // Configuration de Transmission
// const TRANSMISSION_URL = process.env.TRANSMISSION_URL;
// const USERNAME = process.env.TRANSMISSION_USER;
// const PASSWORD = process.env.TRANSMISSION_PASSWORD;

// Configuration des chemins
const QBITTORRENT_USER = process.env.QBITTORRENT_USER;
const QBITTORRENT_PASS = process.env.QBITTORRENT_PASS;
const QBITTORRENT_HOST = process.env.QBITTORRENT_HOST;
const LOG_CHANNEL_ID = process.env.LOG_CHANNEL_ID; // YOUR LOG CHANNEL ID
const DISCORD_USER_ID = process.env.DISCORD_USER_ID; // YOUR DISCORD USER ID@
const LOG_FILE = process.env.LOG_FILE;
let SID = null; // Stocker l'ID de session

// Connexion √† qBittorrent
const qbt = new QBittorrent(QBITTORRENT_HOST);

qbt.login(QBITTORRENT_USER, QBITTORRENT_PASS)
  .then(() => {
    console.log('Connect√© √† qBittorrent !');
  })
  .catch(err => {
    console.error('Erreur de connexion :', err);
  });

// Suppression de la configuration par d√©faut du code
// et modification de la gestion de la configuration
let config = null;

// Fonction pour charger la configuration
function loadConfig() {
  try {
    if (!fs.existsSync('config.json')) {
      throw new Error('Le fichier config.json n\'existe pas');
    }
    
    const savedConfig = JSON.parse(fs.readFileSync('config.json', 'utf8'));
    if (!savedConfig.bot || !savedConfig.pm2) {
      throw new Error('Configuration invalide: les sections bot et pm2 sont requises');
    }
    
    config = savedConfig;
    console.log('Configuration charg√©e avec succ√®s');
    return true;
  } catch (error) {
    console.error('Erreur critique lors du chargement de la configuration:', error);
    console.error('Veuillez v√©rifier que le fichier config.json existe et est valide');
    process.exit(1); // Arr√™t du bot si pas de configuration valide
  }
}

// Fonction pour sauvegarder la configuration
function saveConfig() {
  try {
    if (!config) {
      throw new Error('Aucune configuration √† sauvegarder');
    }
    fs.writeFileSync('config.json', JSON.stringify(config, null, 2));
    console.log('Configuration sauvegard√©e avec succ√®s');
    return true;
  } catch (error) {
    console.error('Erreur lors de la sauvegarde de la configuration:', error);
    return false;
  }
}

// Charger la configuration au d√©marrage
loadConfig();

// Mettre √† jour les r√©f√©rences dans le code
let botConfig = config.bot;

// Fonction pour afficher la configuration actuelle de mani√®re format√©e
function formatConfig(config) {
  return `üìÅ **Configuration compl√®te**:

ü§ñ **Configuration du Bot**:
${Object.entries(config.bot)
  .map(([key, value]) => `‚Ä¢ ${key}: ${value}`)
  .join('\n')}

‚öôÔ∏è **Configuration PM2**:
${Object.entries(config.pm2)
  .map(([key, value]) => {
    if (typeof value === 'object') {
      return `‚Ä¢ ${key}:\n${Object.entries(value)
        .map(([k, v]) => `  - ${k}: ${v}`)
        .join('\n')}`;
    }
    return `‚Ä¢ ${key}: ${value}`;
  })
  .join('\n')}`;
}

// Fonction pour formater les logs comme PM2
function formatPm2Log(log) {
  try {
    // Si le log est une cha√Æne, essayer de le parser en JSON
    if (typeof log === 'string') {
      try {
        log = JSON.parse(log);
      } catch {
        // Si ce n'est pas du JSON, format simple
        return `üü¢ **INFO** | \`${new Date().toLocaleString('fr-FR')}\`\n${log.trim()}\n${'‚îÄ'.repeat(40)}`;
      }
    }

    // Formatage de la date
    const timestamp = new Date(log.timestamp || Date.now()).toLocaleString('fr-FR', {
      timeZone: 'Europe/Paris',
      hour12: false,
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    // D√©terminer le type et l'emoji
    let typeEmoji, typeText;
    if (log.type === 'err' || (log.message && log.message.toLowerCase().includes('erreur'))) {
      typeEmoji = 'üî¥';
      typeText = 'ERREUR';
    } else if (log.type === 'warn' || (log.message && log.message.toLowerCase().includes('avertissement'))) {
      typeEmoji = 'üü°';
      typeText = 'ATTENTION';
    } else {
      typeEmoji = 'üü¢';
      typeText = 'INFO';
    }

    // Nettoyer et formater le message
    let message = '';
    if (log.message) {
      message = typeof log.message === 'string' 
        ? log.message.replace(/\\n/g, '\n').trim()
        : JSON.stringify(log.message, null, 2);

      // Supprimer les timestamps redondants et autres m√©tadonn√©es
      message = message.replace(/^\d{4}-\d{2}-\d{2}.*?\+\d{2}:\d{2}/, '').trim();
      message = message.replace(/^"/, '').replace(/"$/, '');
    }

    // Formater diff√©remment selon le type de message
    let formattedMessage;
    if (message.toLowerCase().includes('pr√™t')) {
      formattedMessage = `${typeEmoji} **BOT ${message.toUpperCase()}** | \`${timestamp}\``;
    } else if (message.toLowerCase().includes('connect√©')) {
      formattedMessage = `${typeEmoji} **CONNEXION R√âUSSIE** | \`${timestamp}\`\nüì° ${message}`;
    } else if (message.toLowerCase().includes('erreur')) {
      formattedMessage = `${typeEmoji} **${typeText}** | \`${timestamp}\`\n‚ö†Ô∏è ${message}`;
    } else {
      formattedMessage = `${typeEmoji} **${typeText}** | \`${timestamp}\`\nüìù ${message}`;
    }

    // Ajouter des informations de processus si disponibles
    if (log.app_name && log.process_id) {
      formattedMessage += `\nüëæ \`${log.app_name}\` (PID: ${log.process_id})`;
    }

    return `${formattedMessage}\n${'‚îÄ'.repeat(40)}`;

  } catch (error) {
    console.error('Erreur de formatage du log:', error);
    return `‚ö†Ô∏è **LOG NON FORMAT√â** | \`${new Date().toLocaleString('fr-FR')}\`\n${typeof log === 'object' ? JSON.stringify(log, null, 2) : String(log)}\n${'‚îÄ'.repeat(40)}`;
  }
}

// Fonction pour envoyer les logs dans Discord
async function logToDiscord(log) {
  try {
    if (!log) return;

    const logChannel = await client.channels.fetch(LOG_CHANNEL_ID);
    if (logChannel && logChannel.isTextBased()) {
      const formattedLog = formatPm2Log(log);
      
      // Limiter la taille des logs pour √©viter l'erreur 50035
      const MAX_EMBED_DESCRIPTION = 4000; // L√©g√®rement inf√©rieur √† la limite de 4096
      
      // Utiliser des embeds pour les erreurs
      if (log.type === 'err') {
        let description = formattedLog;
        
        // Tronquer la description si elle est trop longue
        if (description.length > MAX_EMBED_DESCRIPTION) {
          description = description.substring(0, MAX_EMBED_DESCRIPTION) + '... (tronqu√©)';
        }
        
        await logChannel.send({
          embeds: [{
            color: 0xFF0000, // Rouge pour les erreurs
            description: description,
            footer: {
              text: `Process: ${log.app_name || 'DiscordBot'} (PID: ${log.process_id || 0})`
            }
          }]
        }).catch(error => {
          console.error('Erreur lors de l\'envoi du log dans Discord:', error.code, error.message);
        });
    } else {
        // Pour les logs normaux, utiliser des messages texte simples
        // et les diviser si n√©cessaire
        if (formattedLog.length > 2000) {
          const parts = [];
          let remaining = formattedLog;
          
          while (remaining.length > 0) {
            const chunk = remaining.substring(0, 1900);
            const lastNewline = chunk.lastIndexOf('\n');
            
            if (lastNewline > 0) {
              parts.push(remaining.substring(0, lastNewline));
              remaining = remaining.substring(lastNewline + 1);
            } else {
              parts.push(chunk);
              remaining = remaining.substring(1900);
            }
          }
          
          for (const part of parts) {
            await logChannel.send(part).catch(error => {
              console.error('Erreur lors de l\'envoi du log dans Discord:', error.code, error.message);
            });
          }
        } else {
          await logChannel.send(formattedLog).catch(error => {
            console.error('Erreur lors de l\'envoi du log dans Discord:', error.code, error.message);
          });
        }
      }
    }
  } catch (error) {
    console.error('Erreur lors de l\'envoi du log dans Discord:', error);
  }
}

// Rediriger les logs PM2 vers Discord
const pm2Logs = exec('pm2 logs --json');

pm2Logs.stdout.on('data', (data) => {
  const lines = data.toString().split('\n'); // Divise les donn√©es en lignes

  lines.forEach((line) => {
    try {
      if (line.trim()) { // Ignore les lignes vides
        const log = JSON.parse(line.trim()); // Parse chaque ligne
        logToDiscord(log);
      }
    } catch (error) {
      console.error('Erreur lors de la lecture des logs PM2:', error);
    }
  });
});

pm2Logs.stderr.on('data', (data) => {
  console.error('Erreur PM2:', data.toString());
});

// Initialisation du bot
client.on('ready', async () => {
  console.log(`Bot d√©marr√© en tant que ${client.user.tag}`);
  
  // Attendre un court instant avant de d√©finir l'activit√© pour √©viter les erreurs de sharding
  setTimeout(async () => {
    try {
      // D√©finir l'activit√© du bot de mani√®re s√©curis√©e
      if (client.user) {
        await client.user.setActivity('qBittorrent', { type: 'WATCHING' });
        console.log('Activit√© du bot d√©finie avec succ√®s');
      }
    } catch (error) {
      console.error('Erreur lors de la d√©finition de l\'activit√©:', error);
    }
    
    // Envoyer le message de d√©marrage apr√®s avoir d√©fini l'activit√©
    try {
  await logToDiscord(`Bot d√©marr√© en tant que ${client.user.tag}`);
    } catch (error) {
      console.error('Erreur lors de l\'envoi du message de d√©marrage:', error);
    }
  }, 5000); // Attendre 5 secondes
  
  // Se connecter √† qBittorrent apr√®s l'initialisation du bot
  try {
    await loginToQBittorrent();
  console.log('Pr√™t !');
  } catch (error) {
    console.error('Erreur lors de la connexion √† qBittorrent:', error);
  }
});

const sendLongMessage = async (channel, content) => {
  const maxLength = 2000 - 10; // Marge de s√©curit√©
  if (content.length <= maxLength) {
    await channel.send(content);
    return;
  }

  // D√©coupage intelligent
  const parts = [];
  while (content.length) {
    let chunk = content.substring(0, maxLength);
    const lastNewLine = chunk.lastIndexOf('\n');
    if (lastNewLine > 0) {
      chunk = chunk.substring(0, lastNewLine);
      content = content.substring(lastNewLine + 1);
    } else {
      content = content.substring(maxLength);
    }
    parts.push(`\`\`\`\n${chunk}\n\`\`\``);
  }

  for (const part of parts) {
    await channel.send(part);
    await new Promise(resolve => setTimeout(resolve, 1000)); // Anti-spam
  }
};

// Fonction pour se connecter √† qBittorrent et obtenir l'ID de session
async function loginToQBittorrent() {
  try {
    // V√©rifier si le service est actif
    await axios.get(QBITTORRENT_HOST, { timeout: 5000 });
    
    // Authentification
    const response = await axios.post(
      `${QBITTORRENT_HOST}/api/v2/auth/login`,
      `username=${QBITTORRENT_USER}&password=${QBITTORRENT_PASS}`,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'User-Agent': 'Mozilla/5.0'
        },
        timeout: 10000
      }
    );

    // Gestion des erreurs de connexion
    if (response.data.includes('Fails')) {
      throw new Error('Identifiants qBittorrent incorrects');
    }

    // R√©cup√©ration du SID
    const cookies = response.headers['set-cookie'];
    if (!cookies) throw new Error('Aucun cookie de session re√ßu');
    
    SID = cookies[0].split('=')[1].split(';')[0];
    console.log('Connexion r√©ussie. SID:', SID);
    return true;

  } catch (error) {
    console.error('√âchec de connexion √† qBittorrent:', {
      code: error.code,
      message: error.message,
      config: error.config?.url
    });
    return false;
  }
}

// Fonction pour g√©rer la reconnexion automatique
async function handleReconnection() {
  const maxRetries = 5;
  let retries = 0;

  while (retries < maxRetries) {
    try {
      const loggedIn = await loginToQBittorrent();
      if (loggedIn) {
        console.log('Reconnexion √† qBittorrent r√©ussie');
        return true;
      }
    } catch (error) {
      console.error(`Tentative de reconnexion ${retries + 1}/${maxRetries} √©chou√©e:`, error);
    }
    retries++;
    await new Promise(resolve => setTimeout(resolve, 5000 * retries)); // D√©lai croissant
  }
  return false;
}

// Fonction pour v√©rifier la validit√© de la session
async function checkSession() {
  try {
    const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/app/version`, {
      headers: { 'Cookie': `SID=${SID}` }
    });
    return response.status === 200;
  } catch (error) {
    return false;
  }
}

// Fonction pour ajouter un torrent
async function addTorrent(url, savePath) {
  try {
    // 1. T√©l√©charger le fichier .torrent
    const torrentFile = await axios.get(url, {
      responseType: 'arraybuffer',
      headers: { 'User-Agent': 'Mozilla/5.0' }
    });

    // 2. Cr√©er le FormData SP√âCIFIQUE pour qBittorrent
    const form = new FormData();
    form.append('torrents', torrentFile.data, {
      filename: 'file.torrent',
      contentType: 'application/x-bittorrent',
      knownLength: torrentFile.data.length
    });

    // 3. Pr√©parer les headers MANUELLEMENT
    const headers = {
      'Cookie': `SID=${SID}`,
      'Content-Type': `multipart/form-data; boundary=${form.getBoundary()}`,
      'User-Agent': 'Mozilla/5.0',
      'Content-Length': form.getLengthSync()
    };

    // 4. Envoyer la requ√™te
    const response = await axios.post(
      `${QBITTORRENT_HOST}/api/v2/torrents/add`,
      form.getBuffer(),
      { headers }
    );

    return response.status === 200 
      ? '‚úÖ Torrent ajout√© avec succ√®s !' 
      : '‚ùå R√©ponse inattendue du serveur';
    
  } catch (error) {
    console.error('Erreur technique:', {
      code: error.code,
      message: error.message,
      response: error.response?.data
    });
    return '‚ùå Erreur lors de l\'ajout du torrent';
  }
}

// Fonction pour obtenir la liste des torrents
async function getTorrentList() {
  try {
    if (!SID || !(await checkSession())) {
      const reconnected = await handleReconnection();
      if (!reconnected) {
        throw new Error('Impossible de se reconnecter √† qBittorrent');
      }
    }

    const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/info`, {
      headers: {
        'Cookie': `SID=${SID}`
      }
    });

    return response.data;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de la liste des torrents:', error);
    return null;
  }
}

// Fonction pour formater les vitesses
function formatSpeed(bytesPerSecond) {
  if (bytesPerSecond === 0) return '0 B/s';
  
  const units = ['B/s', 'KB/s', 'MB/s', 'GB/s'];
  let i = 0;
  
  while (bytesPerSecond >= 1024 && i < units.length - 1) {
    bytesPerSecond /= 1024;
    i++;
  }
  
  return `${bytesPerSecond.toFixed(1)} ${units[i]}`;
}

// Fonction pour formater la taille
function formatSize(bytes) {
  if (bytes === 0) return '0 B';
  
  const units = ['B', 'KB', 'MB', 'GB', 'TB'];
  let i = 0;
  
  while (bytes >= 1024 && i < units.length - 1) {
    bytes /= 1024;
    i++;
  }
  
  return `${bytes.toFixed(2)} ${units[i]}`;
}

// Map pour suivre l'√©tat des torrents
const torrentStates = new Map();
// Map pour suivre les notifications de progression envoy√©es
const progressNotifications = new Map();
// File d'attente des torrents
const torrentQueue = [];
// Torrents actifs
const activeTorrents = new Set();
// Historique des donn√©es pour les graphiques
const torrentHistory = new Map();
// Limite de points d'historique par torrent
const MAX_HISTORY_POINTS = 20;
// Dur√©e maximale de conservation des donn√©es d'historique (24 heures en ms)
const MAX_HISTORY_AGE = 24 * 60 * 60 * 1000;

// Fonction pour nettoyer les donn√©es anciennes
function cleanupOldData() {
  const now = Date.now();
  
  // Nettoyer l'historique des torrents
  for (const [hash, history] of torrentHistory.entries()) {
    // Supprimer les torrents qui n'ont pas √©t√© mis √† jour depuis MAX_HISTORY_AGE
    if (history.lastUpdate && (now - history.lastUpdate > MAX_HISTORY_AGE)) {
      torrentHistory.delete(hash);
      continue;
    }
  }
  
  // Nettoyer les √©tats des torrents qui n'existent plus
  getTorrentList().then(torrents => {
    if (!torrents) return;
    
    const activeHashes = new Set(torrents.map(t => t.hash));
    
    // Nettoyer les maps pour les torrents qui n'existent plus
    for (const hash of torrentStates.keys()) {
      if (!activeHashes.has(hash)) {
        torrentStates.delete(hash);
        progressNotifications.delete(hash);
        torrentHistory.delete(hash);
      }
    }
  }).catch(err => console.error('Erreur lors du nettoyage des donn√©es:', err));
}

// Appeler le nettoyage p√©riodiquement
setInterval(cleanupOldData, 3600000); // Toutes les heures

// Fonction pour v√©rifier les torrents termin√©s et envoyer une notification
async function checkCompletedTorrents() {
  try {
    const torrents = await getTorrentList();
    if (!torrents) return;

    // R√©cup√©rer √† la fois le canal de logs et le canal principal
    const logChannel = await client.channels.fetch(LOG_CHANNEL_ID).catch(error => {
      console.error(`Erreur lors de la r√©cup√©ration du canal de logs:`, error);
      return null;
    });
    
    // Trouver le canal principal o√π l'utilisateur interagit avec le bot
    // Utiliser le canal de logs comme fallback si le canal principal n'est pas trouv√©
    const mainChannel = client.channels.cache.find(channel => 
      channel.type === 0 && // Type 0 = TextChannel
      channel.id !== LOG_CHANNEL_ID && 
      channel.permissionsFor(client.user).has('SendMessages')
    ) || logChannel;
    
    if (!mainChannel || !mainChannel.isTextBased()) {
      console.error('Aucun canal valide trouv√© pour envoyer les notifications');
      return;
    }

    for (const torrent of torrents) {
      // Initialiser l'√©tat du torrent s'il n'existe pas encore
      if (!torrentStates.has(torrent.hash)) {
        torrentStates.set(torrent.hash, torrent.progress);
        continue; // Passer au suivant car c'est la premi√®re fois qu'on le voit
      }

      const previousProgress = torrentStates.get(torrent.hash);
      
      // Un torrent est consid√©r√© comme nouvellement termin√© si:
      // - Il avait un √©tat pr√©c√©dent (pas nouveau)
      // - Son √©tat pr√©c√©dent n'√©tait pas 1 (100%)
      // - Son √©tat actuel est 1 (100%)
      const isNewlyCompleted = previousProgress !== undefined && 
                               previousProgress < 1 && 
                               torrent.progress === 1;

      // V√©rifier les notifications de progression
      if (config.bot.progressNotifications.enabled && 
          torrent.size >= config.bot.progressNotifications.minSize &&
          previousProgress !== undefined && 
          torrent.progress < 1) {
        
        // V√©rifier chaque seuil de progression
        for (const threshold of config.bot.progressNotifications.thresholds) {
          const thresholdDecimal = threshold / 100;
          
          // Si le torrent a d√©pass√© un seuil et qu'aucune notification n'a √©t√© envoy√©e pour ce seuil
          if (torrent.progress >= thresholdDecimal && 
              previousProgress < thresholdDecimal && 
              (!progressNotifications.has(torrent.hash) || 
               !progressNotifications.get(torrent.hash).includes(threshold))) {
            
            // Envoyer une notification de progression
            const progressMessage = {
              embeds: [{
                color: 0x0099FF,
                title: `üìä Progression: ${threshold}% atteint`,
                description: `Le torrent **${torrent.name}** a atteint ${threshold}% de progression`,
                fields: [
                  {
                    name: 'üìà D√©tails',
                    value: `‚Ä¢ Taille: ${formatSize(torrent.size)}
‚Ä¢ T√©l√©charg√©: ${formatSize(torrent.downloaded)}
‚Ä¢ Vitesse: ${formatSpeed(torrent.dlspeed)}
‚Ä¢ ETA: ${torrent.eta > 0 ? `${Math.floor(torrent.eta / 3600)}h ${Math.floor((torrent.eta % 3600) / 60)}m` : 'Termin√©'}`
                  }
                ],
                timestamp: new Date().toISOString()
              }]
            };

            // Envoyer au canal de logs
            if (logChannel) {
              await logChannel.send(progressMessage).catch(error => {
                console.error('Erreur lors de l\'envoi de la notification de progression:', error);
              });
            }
            
            // Enregistrer que cette notification a √©t√© envoy√©e
            if (!progressNotifications.has(torrent.hash)) {
              progressNotifications.set(torrent.hash, [threshold]);
            } else {
              progressNotifications.get(torrent.hash).push(threshold);
            }
          }
        }
      }

      // Si le torrent vient juste de se terminer et que les notifications sont activ√©es
      if (isNewlyCompleted && config.bot.notifyOnComplete) {
        console.log(`Torrent termin√© d√©tect√©: ${torrent.name}`);
        
        // Obtenir des informations suppl√©mentaires sur le torrent
        let properties = {};
        try {
          const propertiesResponse = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/properties?hash=${torrent.hash}`, {
            headers: { 'Cookie': `SID=${SID}` }
          });
          properties = propertiesResponse.data;
        } catch (error) {
          console.error('Erreur lors de la r√©cup√©ration des propri√©t√©s du torrent:', error);
          properties = { time_elapsed: 0 };
        }
        
        // Cr√©er le message de notification de t√©l√©chargement termin√©
        const completionMessage = {
          content: `<@${DISCORD_USER_ID}> Votre t√©l√©chargement est termin√© !`,
          embeds: [{
            color: 0x00FF00,
            title: '‚úÖ T√©l√©chargement Termin√© !',
            description: `Le torrent **${torrent.name}** est termin√© !`,
            fields: [
              {
                name: 'üìä Informations',
                value: `‚Ä¢ Taille: ${formatSize(torrent.size)}
‚Ä¢ Ratio: ${torrent.ratio.toFixed(2)}
‚Ä¢ Temps total: ${Math.floor(properties.time_elapsed / 3600)}h ${Math.floor((properties.time_elapsed % 3600) / 60)}m
‚Ä¢ Vitesse moyenne: ${formatSpeed(torrent.size / (properties.time_elapsed || 1))}`
              },
              {
                name: 'üìÅ Emplacement',
                value: `\`${config.bot.defaultSavePath}/${torrent.name}\``
              }
            ],
            timestamp: new Date().toISOString()
          }]
        };

        // Envoyer la notification au canal principal pour que l'utilisateur soit ping√©
        await mainChannel.send(completionMessage).catch(error => {
          console.error('Erreur lors de l\'envoi de la notification de t√©l√©chargement termin√©:', error);
        });
        
        // √âgalement envoyer au canal de logs si diff√©rent du canal principal
        if (logChannel && logChannel.id !== mainChannel.id) {
          await logChannel.send(completionMessage).catch(error => {
            console.error('Erreur lors de l\'envoi de la notification de t√©l√©chargement termin√© au canal de logs:', error);
          });
        }
        
        console.log(`Notification envoy√©e pour: ${torrent.name}`);
        
        // Supprimer les notifications de progression pour ce torrent
        progressNotifications.delete(torrent.hash);
        
        // Mettre √† jour les torrents actifs
        activeTorrents.delete(torrent.hash);
        
        // Traiter la file d'attente
        processQueue();
      }

      // Mettre √† jour l'√©tat
      torrentStates.set(torrent.hash, torrent.progress);
    }
  } catch (error) {
    console.error('Erreur lors de la v√©rification des torrents termin√©s:', error);
  }
}

// Fonction pour g√©rer la file d'attente des torrents
async function processQueue() {
  try {
    // V√©rifier si nous pouvons d√©marrer de nouveaux torrents
    while (activeTorrents.size < config.bot.maxConcurrentDownloads && torrentQueue.length > 0) {
      const nextTorrent = torrentQueue.shift();
      
      // D√©marrer le torrent
      await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/resume`, 
        `hashes=${nextTorrent}`, {
          headers: { 'Cookie': `SID=${SID}` }
        });

      // Ajouter √† la liste des torrents actifs
      activeTorrents.add(nextTorrent);
      
      console.log(`D√©marrage du torrent ${nextTorrent} depuis la file d'attente`);
    }
  } catch (error) {
    console.error('Erreur lors du traitement de la file d\'attente:', error);
  }
}

// Fonction pour v√©rifier et g√©rer les limites de t√©l√©chargements simultan√©s
async function manageDownloadLimits() {
  try {
    const torrents = await getTorrentList();
    if (!torrents) return;
    
    // R√©initialiser la liste des torrents actifs
    activeTorrents.clear();
    torrentQueue.length = 0;
    
    // Identifier les torrents en cours de t√©l√©chargement
    const downloadingTorrents = torrents.filter(t => 
      t.state === 'downloading' || t.state === 'stalledDL' || t.state === 'metaDL'
    );
    
    // Si nous avons plus de torrents que la limite
    if (downloadingTorrents.length > config.bot.maxConcurrentDownloads) {
      // Trier par progression (priorit√© aux torrents les plus avanc√©s)
      downloadingTorrents.sort((a, b) => b.progress - a.progress);
      
      // Les torrents √† garder actifs
      const keepActive = downloadingTorrents.slice(0, config.bot.maxConcurrentDownloads);
      
      // Les torrents √† mettre en pause
      const pauseTorrents = downloadingTorrents.slice(config.bot.maxConcurrentDownloads);
      
      // Mettre √† jour les ensembles
      keepActive.forEach(t => activeTorrents.add(t.hash));
      
      // Mettre en pause les torrents exc√©dentaires
      if (pauseTorrents.length > 0) {
        const pauseHashes = pauseTorrents.map(t => t.hash).join('|');
        await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/pause`, 
          `hashes=${pauseHashes}`, {
          headers: { 'Cookie': `SID=${SID}` }
        });
        
        // Ajouter √† la file d'attente
        pauseTorrents.forEach(t => torrentQueue.push(t.hash));
        
        console.log(`${pauseTorrents.length} torrents mis en file d'attente pour respecter la limite de ${config.bot.maxConcurrentDownloads}`);
      }
    } else {
      // Tous les torrents en t√©l√©chargement sont actifs
      downloadingTorrents.forEach(t => activeTorrents.add(t.hash));
    }
  } catch (error) {
    console.error('Erreur lors de la gestion des limites de t√©l√©chargement:', error);
  }
}

// Fonction pour v√©rifier l'espace disque disponible
async function checkDiskSpace() {
  try {
    if (!config.bot.diskSpace.enabled) return;
    
    // Ex√©cuter la commande df pour obtenir l'espace disque
    const { stdout } = await new Promise((resolve, reject) => {
      exec(`df -h ${config.bot.defaultSavePath}`, (error, stdout, stderr) => {
        if (error) reject(error);
        else resolve({ stdout, stderr });
      });
    });
    
    // Analyser la sortie pour obtenir le pourcentage d'utilisation
    const lines = stdout.trim().split('\n');
    if (lines.length < 2) throw new Error('Format de sortie df inattendu');
    
    const diskInfo = lines[1].split(/\s+/);
    const usagePercent = parseInt(diskInfo[4].replace('%', ''));
    
    // V√©rifier si l'utilisation d√©passe le seuil d'avertissement
    if (usagePercent >= config.bot.diskSpace.warnThreshold) {
      const logChannel = await client.channels.fetch(LOG_CHANNEL_ID);
      if (logChannel && logChannel.isTextBased()) {
        await logChannel.send({
          embeds: [{
            color: 0xFF0000,
            title: '‚ö†Ô∏è Alerte Espace Disque',
            description: `L'espace disque utilis√© a atteint **${usagePercent}%** (seuil: ${config.bot.diskSpace.warnThreshold}%)`,
            fields: [
              {
                name: 'üíæ Informations Disque',
                value: `‚Ä¢ Chemin: ${config.bot.defaultSavePath}
‚Ä¢ Taille: ${diskInfo[1]}
‚Ä¢ Utilis√©: ${diskInfo[2]} (${usagePercent}%)
‚Ä¢ Disponible: ${diskInfo[3]}`
              }
            ],
            timestamp: new Date().toISOString()
          }]
        });
      }
    }
  } catch (error) {
    console.error('Erreur lors de la v√©rification de l\'espace disque:', error);
  }
}

// Fonction pour mettre √† jour automatiquement les vues d√©taill√©es
async function updateDetailedViews() {
  try {
    if (!config.bot.detailedView.enabled) {
      console.log('Mise √† jour des vues d√©taill√©es d√©sactiv√©e');
      return;
    }
    
    console.log('Mise √† jour des vues d√©taill√©es...');
    
    // Pour chaque message de vue d√©taill√©e
    for (const [hash, messageInfo] of detailedViewMessages.entries()) {
      // V√©rifier si le message est encore valide (moins de 10 minutes)
      const messageAge = Date.now() - messageInfo.timestamp;
      if (messageAge > 600000) { // 10 minutes
        console.log(`Message trop ancien pour ${hash}, suppression de la r√©f√©rence`);
        detailedViewMessages.delete(hash);
        continue;
      }
      
      // R√©cup√©rer le torrent
      const torrents = await getTorrentList();
      if (!torrents) {
        console.error('Impossible de r√©cup√©rer la liste des torrents pour la mise √† jour des vues d√©taill√©es');
        continue;
      }
      
      const torrent = torrents.find(t => t.hash === hash);
      
      if (torrent) {
        // G√©n√©rer la vue d√©taill√©e mise √† jour
        const detailedView = await getDetailedTorrentView(torrent);
        
        if (detailedView && detailedView.embeds) {
          try {
            // R√©cup√©rer le message
            const channel = await client.channels.fetch(messageInfo.channelId).catch(error => {
              console.error(`Erreur lors de la r√©cup√©ration du canal ${messageInfo.channelId}:`, error);
              return null;
            });
            
            if (!channel) {
              console.error(`Canal ${messageInfo.channelId} non trouv√©, suppression de la r√©f√©rence`);
              detailedViewMessages.delete(hash);
              continue;
            }
            
            const message = await channel.messages.fetch(messageInfo.messageId).catch(error => {
              console.error(`Erreur lors de la r√©cup√©ration du message ${messageInfo.messageId}:`, error);
              return null;
            });
            
            if (!message) {
              console.error(`Message ${messageInfo.messageId} non trouv√©, suppression de la r√©f√©rence`);
              detailedViewMessages.delete(hash);
              continue;
            }
            
            // Mettre √† jour le message
            await message.edit({ embeds: detailedView.embeds }).catch(error => {
              console.error(`Erreur lors de la mise √† jour du message ${messageInfo.messageId}:`, error);
              if (error.code === 10008) { // Message inconnu
                detailedViewMessages.delete(hash);
              }
            });
            
            console.log(`Vue d√©taill√©e mise √† jour pour ${torrent.name}`);
          } catch (error) {
            // Le message n'existe plus ou n'est pas accessible
            console.error(`Erreur lors de la mise √† jour du message:`, error);
            detailedViewMessages.delete(hash);
          }
        }
      } else {
        // Le torrent n'existe plus
        console.log(`Torrent ${hash} non trouv√©, suppression de la r√©f√©rence`);
        detailedViewMessages.delete(hash);
      }
    }
  } catch (error) {
    console.error('Erreur lors de la mise √† jour des vues d√©taill√©es:', error);
  }
}

// Fonction pour g√©n√©rer le r√©sum√© quotidien
async function generateDailySummary() {
  try {
    if (!config.bot.dailySummary.enabled) {
      console.log('R√©sum√© quotidien d√©sactiv√©');
      return;
    }
    
    const now = new Date();
    const [hour, minute] = config.bot.dailySummary.time.split(':').map(Number);
    
    // V√©rifier si c'est l'heure du r√©sum√© (√† 1 minute pr√®s)
    const currentHour = now.getHours();
    const currentMinute = now.getMinutes();
    
    console.log(`V√©rification du r√©sum√© quotidien: ${currentHour}:${currentMinute} vs ${hour}:${minute}`);
    
    if (currentHour === hour && Math.abs(currentMinute - minute) <= 1) {
      console.log('G√©n√©ration du r√©sum√© quotidien...');
      
      const torrents = await getTorrentList();
      if (!torrents) {
        console.error('Impossible de r√©cup√©rer la liste des torrents pour le r√©sum√© quotidien');
        return;
      }
      
      // Statistiques
      const stats = {
        total: torrents.length,
        active: torrents.filter(t => t.state === 'downloading' || t.state === 'uploading').length,
        completed: torrents.filter(t => t.progress === 1).length,
        paused: torrents.filter(t => t.state === 'pausedDL' || t.state === 'pausedUP').length,
        totalSize: torrents.reduce((acc, t) => acc + t.size, 0),
        downloadedToday: 0, // √Ä calculer
        uploadedToday: 0,   // √Ä calculer
        completedToday: []  // Liste des torrents termin√©s aujourd'hui
      };
      
      // Identifier les torrents termin√©s aujourd'hui
      const today = new Date().setHours(0, 0, 0, 0);
      for (const torrent of torrents) {
        if (torrent.completion_on && torrent.completion_on * 1000 >= today) {
          stats.completedToday.push(torrent);
        }
      }
      
      // R√©cup√©rer les statistiques de transfert
      try {
        const transferStats = await axios.get(`${QBITTORRENT_HOST}/api/v2/transfer/info`, {
                headers: { 'Cookie': `SID=${SID}` }
              });

        if (transferStats.status === 200) {
          stats.downloadedToday = transferStats.data.dl_info_data || 0;
          stats.uploadedToday = transferStats.data.up_info_data || 0;
        }
            } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des statistiques de transfert:', error);
      }
      
      // G√©n√©rer le message de r√©sum√©
      const summaryEmbed = {
        color: 0x0099FF,
        title: 'üìä R√©sum√© Quotidien des Torrents',
        description: `Voici le r√©sum√© de l'activit√© torrent pour le ${now.toLocaleDateString('fr-FR')}`,
        fields: [
          {
            name: 'üìà Statistiques G√©n√©rales',
            value: `‚Ä¢ Torrents totaux: ${stats.total}
‚Ä¢ Actifs: ${stats.active}
‚Ä¢ Compl√©t√©s: ${stats.completed}
‚Ä¢ En pause: ${stats.paused}
‚Ä¢ Taille totale: ${formatSize(stats.totalSize)}`
          },
          {
            name: 'üîÑ Transfert Aujourd\'hui',
            value: `‚Ä¢ T√©l√©charg√©: ${formatSize(stats.downloadedToday)}
‚Ä¢ Upload√©: ${formatSize(stats.uploadedToday)}
‚Ä¢ Ratio: ${stats.downloadedToday > 0 ? (stats.uploadedToday / stats.downloadedToday).toFixed(2) : '‚àû'}`
          }
        ],
        timestamp: new Date().toISOString()
      };
      
      // Ajouter les torrents termin√©s aujourd'hui
      if (stats.completedToday.length > 0) {
        const completedList = stats.completedToday
          .map(t => `‚Ä¢ ${t.name} (${formatSize(t.size)})`)
          .join('\n');
        
        summaryEmbed.fields.push({
          name: `‚úÖ Torrents Termin√©s Aujourd'hui (${stats.completedToday.length})`,
          value: completedList.length > 1024 ? completedList.substring(0, 1021) + '...' : completedList
        });
      }
      
      // Envoyer le r√©sum√©
      try {
        // Utiliser le LOG_CHANNEL_ID si channelId est "LOG_CHANNEL_ID"
        let channelId = config.bot.dailySummary.channelId;
        if (channelId === "LOG_CHANNEL_ID") {
          channelId = LOG_CHANNEL_ID;
          console.log(`Utilisation de LOG_CHANNEL_ID (${LOG_CHANNEL_ID}) pour le r√©sum√© quotidien`);
        }
        
        if (!channelId || channelId === "LOG_CHANNEL_ID") {
          console.error('ID de canal non valide pour le r√©sum√© quotidien');
          return;
        }
        
        console.log(`Tentative d'envoi du r√©sum√© quotidien au canal ${channelId}`);
        const logChannel = await client.channels.fetch(channelId);
        
        if (logChannel && logChannel.isTextBased()) {
          await logChannel.send({ embeds: [summaryEmbed] });
          console.log('R√©sum√© quotidien envoy√© avec succ√®s');
        } else {
          console.error('Canal de r√©sum√© quotidien non trouv√© ou non textuel');
        }
      } catch (error) {
        console.error('Erreur lors de l\'envoi du r√©sum√© quotidien:', error);
      }
    }
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du r√©sum√© quotidien:', error);
  }
}

// Optimisation des intervalles en regroupant les t√¢ches p√©riodiques
function runScheduledTasks() {
  // Obtenir l'heure actuelle
  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes();
  const seconds = now.getSeconds();
  
  // T√¢ches √† ex√©cuter toutes les 30 secondes
  if (seconds % 30 === 0) {
    console.log('Ex√©cution des t√¢ches toutes les 30 secondes...');
    checkCompletedTorrents(); // V√©rification des torrents termin√©s reste √† 30 secondes pour les notifications rapides
  }
  
  // T√¢ches √† ex√©cuter toutes les 2 minutes
  if (minutes % 2 === 0 && seconds === 0) {
    console.log('Ex√©cution des t√¢ches toutes les 2 minutes...');
    updateDetailedViews(); // Mise √† jour des vues d√©taill√©es toutes les 2 minutes
  }
  
  // T√¢ches √† ex√©cuter toutes les minutes
  if (seconds === 0) {
    console.log('Ex√©cution des t√¢ches toutes les minutes...');
    manageDownloadLimits();
    generateDailySummary();
  }
  
  // T√¢ches √† ex√©cuter toutes les 5 minutes
  if (minutes % 5 === 0 && seconds === 0) {
    console.log('Ex√©cution des t√¢ches toutes les 5 minutes...');
    checkSession().then(valid => {
      if (!valid) {
        console.log('Session expir√©e, reconnexion...');
        loginToQBittorrent();
      }
    });
  }
  
  // T√¢ches √† ex√©cuter toutes les heures
  if (minutes === 0 && seconds === 0) {
    console.log('Ex√©cution des t√¢ches toutes les heures...');
    checkDiskSpace();
    cleanupOldData();
  }
}

// Remplacer tous les intervalles par un seul intervalle optimis√©
const mainInterval = setInterval(runScheduledTasks, 1000);

// Mise √† jour de la gestion des interactions pour utiliser la nouvelle m√©thode registerMessage
client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  const [action, hash] = interaction.customId.split('_');
  
  try {
    switch (action) {
      case 'pause':
        await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/pause`, `hashes=${hash}`, {
          headers: { 'Cookie': `SID=${SID}` }
        });
        await interaction.reply('‚è∏Ô∏è Torrent mis en pause');
        break;

      case 'resume':
        await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/resume`, `hashes=${hash}`, {
          headers: { 'Cookie': `SID=${SID}` }
        });
        await interaction.reply('‚ñ∂Ô∏è Torrent repris');
        break;

      case 'force':
        await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/setForceStart`, `hashes=${hash}&value=true`, {
          headers: { 'Cookie': `SID=${SID}` }
        });
        await interaction.reply('‚è© D√©marrage forc√© activ√©');
        break;

      case 'delete':
        // Cr√©er un message de confirmation
        const confirm = new ButtonBuilder()
          .setCustomId(`confirm_delete_${hash}`)
          .setLabel('Confirmer')
          .setStyle(ButtonStyle.Danger);

        const cancel = new ButtonBuilder()
          .setCustomId(`cancel_delete_${hash}`)
          .setLabel('Annuler')
          .setStyle(ButtonStyle.Secondary);

        const row = new ActionRowBuilder().addComponents(confirm, cancel);

        await interaction.reply({
          content: '‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer ce torrent ?',
          components: [row]
        });
        break;

      case 'confirm_delete':
        await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/delete`, `hashes=${hash}&deleteFiles=false`, {
          headers: { 'Cookie': `SID=${SID}` }
        });
        await interaction.reply('üóëÔ∏è Torrent supprim√©');
        break;

      case 'cancel_delete':
        await interaction.reply('‚ùå Suppression annul√©e');
        break;
    }

    // Mettre √† jour la vue d√©taill√©e apr√®s l'action
    if (action !== 'cancel_delete') {
      try {
        const torrents = await getTorrentList();
        const torrent = torrents.find(t => t.hash === hash);
        if (torrent) {
          const detailedView = await getDetailedTorrentView(torrent);
          if (detailedView) {
            const reply = await interaction.followUp(detailedView).catch(err => {
              console.error('Erreur lors de l\'envoi de la vue d√©taill√©e:', err.message);
              return null;
            });
            
            // Utiliser la nouvelle m√©thode registerMessage si la r√©ponse a √©t√© envoy√©e
            if (reply && detailedView.registerMessage && typeof detailedView.registerMessage === 'function') {
              detailedView.registerMessage(reply);
            }
          }
        }
      } catch (error) {
        console.error('Erreur lors de la mise √† jour de la vue d√©taill√©e:', error);
      }
    }
  } catch (error) {
    console.error('Erreur lors de l\'action sur le torrent:', error);
    // Utiliser ephemeral pour √©viter de polluer le canal
    await interaction.reply({
      content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de l\'action',
      ephemeral: true
    }).catch(err => {
      console.error('Erreur lors de la r√©ponse √† l\'interaction:', err);
    });
  }
});

// Fonction pour renommer un torrent
async function renameTorrent(hash, newName) {
  try {
    if (!SID || !(await checkSession())) {
      const reconnected = await handleReconnection();
      if (!reconnected) {
        throw new Error('Impossible de se reconnecter √† qBittorrent');
      }
    }

    await axios.post(
      `${QBITTORRENT_HOST}/api/v2/torrents/rename`,
      `hash=${hash}&name=${encodeURIComponent(newName)}`,
      {
        headers: {
          'Cookie': `SID=${SID}`,
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );

    return true;
  } catch (error) {
    console.error('Erreur lors du renommage du torrent:', error);
    return false;
  }
}

// Fonction pour mettre √† jour l'historique des torrents
function updateTorrentHistory(torrent) {
  if (!torrentHistory.has(torrent.hash)) {
    torrentHistory.set(torrent.hash, {
      progress: [],
      speed: [],
      peers: [],
      lastUpdate: Date.now()
    });
  }

  const history = torrentHistory.get(torrent.hash);
  const now = new Date().toLocaleTimeString('fr-FR');

  // Mettre √† jour le timestamp
  history.lastUpdate = Date.now();

  // Limiter l'historique √† MAX_HISTORY_POINTS points
  if (history.progress.length >= MAX_HISTORY_POINTS) {
    history.progress.shift();
    history.speed.shift();
    history.peers.shift();
  }

  // Ajouter les nouvelles donn√©es
  history.progress.push({ time: now, value: torrent.progress * 100 });
  history.speed.push({ time: now, value: torrent.dlspeed / 1024 }); // KB/s
  history.peers.push({ time: now, value: torrent.num_leechs + torrent.num_seeds });
}

// Fonction pour g√©n√©rer un graphique
async function generateChart(data, label, color) {
  if (!data || data.length === 0) {
    console.log('Pas de donn√©es pour g√©n√©rer le graphique');
    // Retourner une URL d'image par d√©faut si pas de donn√©es
    return 'https://quickchart.io/chart?c={type:%27line%27,data:{labels:[%27Pas%20de%20donn√©es%27],datasets:[{label:%27Pas%20de%20donn√©es%27,data:[0],borderColor:%27%23cccccc%27}]}}';
  }
  
  try {
    console.log(`G√©n√©ration d'un graphique pour ${label} avec ${data.length} points`);
    const chart = new QuickChart();
    
    // Limiter le nombre de points pour √©viter les erreurs d'URL trop longue
    const maxPoints = 15;
    let chartData = data;
    
    if (data.length > maxPoints) {
      // Prendre les points les plus r√©cents
      chartData = data.slice(-maxPoints);
    }
    
    const labels = chartData.map(point => point.time);
    const values = chartData.map(point => point.value);
    
    console.log('Donn√©es du graphique:', { labels, values });
    
    chart.setConfig({
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: label,
          data: values,
          fill: false,
          borderColor: color,
          tension: 0.1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
    
    chart.setWidth(500);
    chart.setHeight(300);
    chart.setBackgroundColor('white');
    
    const url = chart.getUrl();
    console.log(`URL du graphique g√©n√©r√©e: ${url.substring(0, 100)}...`);
    return url;
    } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du graphique:', error);
    return 'https://quickchart.io/chart?c={type:%27line%27,data:{labels:[%27Erreur%27],datasets:[{label:%27Erreur%27,data:[0],borderColor:%27%23ff0000%27}]}}';
  }
}

// Fonction pour obtenir la vue d√©taill√©e d'un torrent
async function getDetailedTorrentView(torrent) {
  try {
    console.log(`G√©n√©ration de la vue d√©taill√©e pour ${torrent.name}`);
    
    // R√©cup√©rer les propri√©t√©s du torrent
    const properties = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/properties?hash=${torrent.hash}`, {
      headers: { 'Cookie': `SID=${SID}` }
    });

    // Mettre √† jour l'historique du torrent
    updateTorrentHistory(torrent);
    const history = torrentHistory.get(torrent.hash);

    console.log(`Historique r√©cup√©r√© pour ${torrent.hash}: ${history.progress.length} points`);

    // G√©n√©rer les graphiques (seulement progression et vitesse)
    const progressChart = await generateChart(
      history.progress,
      'Progression',
      config.bot.detailedView.graphColors.progress
    );
    
    const speedChart = await generateChart(
      history.speed,
      'Vitesse (KB/s)',
      config.bot.detailedView.graphColors.speed
    );
    
    // V√©rifier et d√©finir des valeurs par d√©faut pour les propri√©t√©s qui pourraient √™tre undefined
    const seeds = properties.data.seeds !== undefined ? properties.data.seeds : 0;
    const peers = properties.data.peers !== undefined ? properties.data.peers : 0;
    const availability = properties.data.availability !== undefined ? properties.data.availability.toFixed(2) : '0.00';
    const time_elapsed = properties.data.time_elapsed !== undefined ? properties.data.time_elapsed : 0;

    // Cr√©er les embeds
    const embeds = [
      new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle(`üì¶ ${torrent.name.substring(0, 250)}`) // Limiter la longueur du titre
        .addFields(
          { name: 'üìä Progression', value: `‚Ä¢ √âtat: ${torrent.state}\n‚Ä¢ Progression: ${(torrent.progress * 100).toFixed(1)}%\n‚Ä¢ Taille: ${formatSize(torrent.size)}` },
          { name: 'üîÑ Transfert', value: `‚Ä¢ ‚¨áÔ∏è ${formatSpeed(torrent.dlspeed)}\n‚Ä¢ ‚¨ÜÔ∏è ${formatSpeed(torrent.upspeed)}\n‚Ä¢ Ratio: ${torrent.ratio.toFixed(2)}` },
          { name: '‚ö° Connexions', value: `‚Ä¢ Seeds: ${seeds}\n‚Ä¢ Peers: ${peers}\n‚Ä¢ Disponibilit√©: ${availability}` },
          { name: '‚è±Ô∏è Temps', value: `‚Ä¢ Temps √©coul√©: ${Math.floor(time_elapsed / 3600)}h ${Math.floor((time_elapsed % 3600) / 60)}m\n‚Ä¢ ETA: ${torrent.eta > 0 ? `${Math.floor(torrent.eta / 3600)}h ${Math.floor((torrent.eta % 3600) / 60)}m` : 'Termin√©'}` }
        )
        .setTimestamp()
    ];

    // Ajouter les graphiques
    if (progressChart) {
      embeds.push(
        new EmbedBuilder()
          .setColor(0x00FF00)
          .setTitle('üìà Graphique de progression')
          .setImage(progressChart)
          .addFields(
            { name: 'Progression', value: 'Evolution de la progression dans le temps' }
          )
      );
    }

    if (speedChart) {
      embeds.push(
        new EmbedBuilder()
          .setColor(0x0099FF)
          .setTitle('üìà Graphique de vitesse')
          .setImage(speedChart)
          .addFields(
            { name: 'Vitesse', value: 'Evolution de la vitesse de t√©l√©chargement' }
          )
      );
    }

    if (peersChart) {
      embeds.push(
        new EmbedBuilder()
          .setColor(0xFF9900)
          .setTitle('üìà Graphique de peers')
          .setImage(peersChart)
          .addFields(
            { name: 'Peers', value: 'Evolution du nombre de peers' }
          )
      );
    }

    // Ajouter les fichiers si activ√©
    if (config.bot.detailedView.showFiles) {
      const files = await getTorrentFiles(torrent.hash);
      if (files && files.length > 0) {
        // Limiter le nombre de fichiers et la longueur des noms
        const filesList = files
          .slice(0, 10) // Limiter √† 10 fichiers pour √©viter les messages trop longs
          .map(f => {
            const fileName = f.name.length > 40 ? f.name.substring(0, 37) + '...' : f.name;
            return `‚Ä¢ ${fileName} (${formatSize(f.size)}) - ${(f.progress * 100).toFixed(1)}%`;
          })
          .join('\n');

        embeds.push(
          new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('üìÅ Fichiers')
            .setDescription(files.length > 10 ? `${filesList}\n... et ${files.length - 10} autres fichiers` : filesList)
        );
      }
    }

    // Ajouter les trackers si activ√©
    if (config.bot.detailedView.showTrackers) {
      const trackers = await getTorrentTrackers(torrent.hash);
      if (trackers && trackers.length > 0) {
        // Limiter le nombre de trackers et la longueur des URLs
        const trackersList = trackers
          .filter(t => t.status !== 0)
          .slice(0, 10)
          .map(t => {
            const trackerUrl = t.url.split('/')[2] || 'tracker';
            return `‚Ä¢ ${trackerUrl.substring(0, 40)} - ${t.status === 1 ? '‚úÖ' : '‚ùå'}`;
          })
          .join('\n');

        embeds.push(
          new EmbedBuilder()
            .setColor(0x0099FF)
            .setTitle('üåê Trackers')
            .setDescription(trackersList || 'Aucun tracker actif')
        );
      }
    }

    console.log(`Vue d√©taill√©e g√©n√©r√©e avec ${embeds.length} embeds`);

    // Cr√©er un objet de retour sans r√©f√©rence circulaire
    const messageData = { embeds };
    
    // Stocker l'ID du hash pour pouvoir l'utiliser dans le callback
    const torrentHash = torrent.hash;
    
    // Ajouter une m√©thode pour enregistrer le message
    messageData.registerMessage = function(message) {
      if (config.bot.detailedView.enabled && message && message.id) {
        console.log(`Enregistrement du message ${message.id} pour le torrent ${torrentHash}`);
        detailedViewMessages.set(torrentHash, {
          messageId: message.id,
          channelId: message.channel.id,
          timestamp: Date.now()
        });
      }
    };

    return messageData;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des d√©tails:', error);
    return null;
  }
}

// Optimisation de la gestion des erreurs
process.on('unhandledRejection', (reason, promise) => {
  console.error('Promesse non g√©r√©e rejet√©e:', reason);
  
  // √âviter les erreurs circulaires en v√©rifiant si la raison est li√©e au sharding
  if (reason instanceof Error && !reason.message.includes('Shard')) {
    logToDiscord(`‚ö†Ô∏è Erreur non g√©r√©e: ${reason}`).catch(console.error);
  } else {
    console.error('Erreur de sharding d√©tect√©e, ignor√©e pour √©viter les boucles');
  }
});

process.on('uncaughtException', (error) => {
  console.error('Exception non captur√©e:', error);
  
  // √âviter les erreurs circulaires en v√©rifiant si l'erreur est li√©e au sharding
  if (!error.message.includes('Shard')) {
    logToDiscord(`üî¥ Exception critique: ${error.message}`).catch(console.error);
    // Donner le temps d'envoyer le log avant de quitter
    setTimeout(() => process.exit(1), 1000);
  } else {
    console.error('Erreur de sharding d√©tect√©e, ignor√©e pour √©viter les boucles');
  }
});

// Fonction pour g√©rer la d√©connexion propre
function handleGracefulShutdown() {
  console.log('Arr√™t du bot en cours...');
  logToDiscord('Bot en cours d\'arr√™t...').then(() => {
    client.destroy();
    process.exit(0);
  }).catch(() => process.exit(0));
}

// √âcouter les signaux d'arr√™t
process.on('SIGINT', handleGracefulShutdown);
process.on('SIGTERM', handleGracefulShutdown);

// Connexion avec gestion des erreurs
client.login(process.env.DISCORD_BOT_TOKEN).catch(error => {
  console.error('Erreur de connexion Discord:', error);
  
  // Tentative de reconnexion apr√®s un d√©lai
  setTimeout(() => {
    console.log('Tentative de reconnexion...');
    client.login(process.env.DISCORD_BOT_TOKEN).catch(err => {
      console.error('√âchec de la reconnexion:', err);
      process.exit(1); // Quitter si la reconnexion √©choue
    });
  }, 10000); // Attendre 10 secondes avant de r√©essayer
});

// √âv√©nements sur les messages
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // V√©rifiez que l'utilisateur a les permissions n√©cessaires
  if (message.author.id !== DISCORD_USER_ID) {
    return message.channel.send('‚ùå Vous n\'avez pas la permission d\'ex√©cuter cette commande.');
  }

  await logToDiscord(`Message re√ßu de ${message.author.tag}: ${message.content}`);

  // V√©rifier si le message contient des pi√®ces jointes .torrent
  if (message.attachments.size > 0) {
    const torrentAttachments = message.attachments.filter(attachment => 
      attachment.name.endsWith('.torrent') || 
      attachment.contentType === 'application/x-bittorrent'
    );
    
    if (torrentAttachments.size > 0) {
      console.log(`${torrentAttachments.size} fichier(s) torrent d√©tect√©(s)`);
      
      // Pour chaque fichier torrent
      for (const [id, attachment] of torrentAttachments) {
        try {
          // Cr√©er un embed avec les informations du fichier
          const embed = new EmbedBuilder()
            .setColor(0x0099FF)
            .setTitle('üì• Fichier Torrent D√©tect√©')
            .setDescription(`Voulez-vous ajouter ce torrent √† qBittorrent?`)
            .addFields(
              { name: 'üìÅ Nom du fichier', value: attachment.name },
              { name: 'üìä Taille', value: formatSize(attachment.size) },
              { name: 'üîó URL', value: attachment.url }
            )
            .setFooter({ text: 'R√©pondez avec ‚úÖ pour confirmer ou ‚ùå pour annuler' })
            .setTimestamp();
          
          // Envoyer l'embed et attendre la confirmation
          const confirmMessage = await message.channel.send({ embeds: [embed] });
          
          // Ajouter les r√©actions
          await confirmMessage.react('‚úÖ');
          await confirmMessage.react('‚ùå');
          
          // Cr√©er un collecteur de r√©actions
          const filter = (reaction, user) => {
            return ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && user.id === message.author.id;
          };
          
          const collector = confirmMessage.createReactionCollector({ filter, time: 60000 });
          
          collector.on('collect', async (reaction, user) => {
            if (reaction.emoji.name === '‚úÖ') {
              // Confirmation re√ßue, ajouter le torrent
              await confirmMessage.edit({ 
                embeds: [
                  EmbedBuilder.from(embed)
                    .setColor(0x00FF00)
                    .setFooter({ text: 'Ajout du torrent en cours...' })
                ] 
              });
              
              // V√©rifier la connexion √† qBittorrent
              if (!SID || !(await checkSession())) {
                const loggedIn = await loginToQBittorrent();
                if (!loggedIn) {
                  await confirmMessage.edit({ 
                    embeds: [
                      EmbedBuilder.from(embed)
                        .setColor(0xFF0000)
                        .setFooter({ text: '√âchec de connexion √† qBittorrent' })
                    ] 
                  });
                  return;
                }
              }
              
              // Ajouter le torrent
              try {
                // T√©l√©charger le fichier .torrent
                const torrentFile = await axios.get(attachment.url, {
          responseType: 'arraybuffer',
          headers: { 'User-Agent': 'Mozilla/5.0' }
        });

                // Cr√©er le FormData pour qBittorrent
        const form = new FormData();
                form.append('torrents', torrentFile.data, {
                  filename: attachment.name,
                  contentType: 'application/x-bittorrent',
                  knownLength: torrentFile.data.length
                });
                
                // Ajouter le chemin de sauvegarde si configur√©
                if (config.bot.defaultSavePath) {
                  form.append('savepath', config.bot.defaultSavePath);
                }
                
                // Pr√©parer les headers
                const headers = {
                  'Cookie': `SID=${SID}`,
                  'Content-Type': `multipart/form-data; boundary=${form.getBoundary()}`,
                  'User-Agent': 'Mozilla/5.0',
                  'Content-Length': form.getLengthSync()
                };
                
                // Envoyer la requ√™te
                const response = await axios.post(
                  `${QBITTORRENT_HOST}/api/v2/torrents/add`,
                  form.getBuffer(),
                  { headers }
                );
                
                if (response.status === 200) {
                  // Succ√®s
                  await confirmMessage.edit({ 
                    embeds: [
                      EmbedBuilder.from(embed)
                        .setColor(0x00FF00)
                        .setFooter({ text: '‚úÖ Torrent ajout√© avec succ√®s!' })
                    ] 
                  });
                  
                  // Attendre un peu pour que qBittorrent traite le torrent
        await new Promise(resolve => setTimeout(resolve, 2000));

                  // R√©cup√©rer la liste des torrents pour trouver celui qu'on vient d'ajouter
                  const torrents = await getTorrentList();
                  if (torrents && torrents.length > 0) {
                    // Trouver le torrent le plus r√©cemment ajout√©
                    const newestTorrent = torrents.reduce((newest, current) => {
                      return (!newest || current.added_on > newest.added_on) ? current : newest;
                    }, null);
                    
                    if (newestTorrent) {
                      // Afficher les d√©tails du torrent ajout√©
                      const detailedView = await getDetailedTorrentView(newestTorrent);
                      if (detailedView && detailedView.embeds) {
                        const reply = await message.channel.send({ 
                          content: 'üìä D√©tails du torrent ajout√©:',
                          embeds: detailedView.embeds 
                        });
                        
                        // Enregistrer le message pour les mises √† jour automatiques
                        if (detailedView.registerMessage && typeof detailedView.registerMessage === 'function') {
                          detailedView.registerMessage(reply);
                        }
                      }
                    }
                  }
                } else {
                  // √âchec
                  await confirmMessage.edit({ 
                    embeds: [
                      EmbedBuilder.from(embed)
                        .setColor(0xFF0000)
                        .setFooter({ text: '‚ùå √âchec de l\'ajout du torrent' })
                    ] 
                  });
                }
              } catch (error) {
                console.error('Erreur lors de l\'ajout du torrent:', error);
                await confirmMessage.edit({ 
                  embeds: [
                    EmbedBuilder.from(embed)
                      .setColor(0xFF0000)
                      .setFooter({ text: `‚ùå Erreur: ${error.message}` })
                  ] 
                });
              }
            } else if (reaction.emoji.name === '‚ùå') {
              // Annulation
              await confirmMessage.edit({ 
                embeds: [
                  EmbedBuilder.from(embed)
                    .setColor(0xFF0000)
                    .setFooter({ text: 'Ajout du torrent annul√©' })
                ] 
              });
            }
            
            // Arr√™ter le collecteur
            collector.stop();
          });
          
          collector.on('end', collected => {
            if (collected.size === 0) {
              // Aucune r√©action collect√©e (timeout)
              confirmMessage.edit({ 
                embeds: [
                  EmbedBuilder.from(embed)
                    .setColor(0xFF0000)
                    .setFooter({ text: 'D√©lai d\'attente expir√©' })
                ] 
              }).catch(console.error);
            }
            
            // Supprimer les r√©actions
            confirmMessage.reactions.removeAll().catch(console.error);
          });
        } catch (error) {
          console.error('Erreur lors du traitement du fichier torrent:', error);
          await message.reply(`‚ùå Erreur lors du traitement du fichier torrent: ${error.message}`);
        }
      }
      
      return; // Ne pas traiter les autres commandes
    }
  }

  // Commande !statustorrent
  if (message.content.startsWith('!statustorrent')) {
    try {
      console.log('Commande !statustorrent re√ßue');
      
      // V√©rifier la connexion
      if (!SID || !(await checkSession())) {
        const loggedIn = await loginToQBittorrent();
        if (!loggedIn) {
          await message.reply('‚ùå Connexion √† qBittorrent √©chou√©e');
          return;
        }
      }

      // R√©cup√©rer les infos des torrents
      const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/info`, {
          headers: { 'Cookie': `SID=${SID}` }
        });

      if (response.status === 200 && response.data.length > 0) {
        console.log(`${response.data.length} torrents trouv√©s`);
        
        // Cr√©er un collecteur global pour nettoyer tous les collecteurs √† la fin
        const allCollectors = [];

        // Trier les torrents par √©tat et progression
        const torrents = response.data.sort((a, b) => {
          // D'abord par √©tat (t√©l√©chargement > upload > autres)
          const stateOrder = {
            'downloading': 0,
            'stalledDL': 1,
            'metaDL': 2,
            'uploading': 3,
            'stalledUP': 4,
            'pausedDL': 5,
            'pausedUP': 6,
            'queuedDL': 7,
            'queuedUP': 8,
            'error': 9,
            'missingFiles': 10,
            'unknown': 11
          };
          
          const stateCompare = (stateOrder[a.state] || 99) - (stateOrder[b.state] || 99);
          
          // Si m√™me √©tat, trier par progression (d√©croissant)
          if (stateCompare === 0) {
            return b.progress - a.progress;
          }
          
          return stateCompare;
        });

        for (const torrent of torrents) {
          // D√©terminer la couleur en fonction de l'√©tat
          let color;
          let stateEmoji;
          let stateText;
          
          if (torrent.state.includes('downloading')) {
            color = 0x3498DB; // Bleu
            stateEmoji = '‚¨áÔ∏è';
            stateText = 'T√©l√©chargement';
          } else if (torrent.state.includes('uploading')) {
            color = 0x2ECC71; // Vert
            stateEmoji = '‚¨ÜÔ∏è';
            stateText = 'Upload';
          } else if (torrent.progress === 1) {
            color = 0x27AE60; // Vert fonc√©
            stateEmoji = '‚úÖ';
            stateText = 'Termin√©';
          } else if (torrent.state.includes('paused')) {
            color = 0xE67E22; // Orange
            stateEmoji = '‚è∏Ô∏è';
            stateText = 'En pause';
          } else if (torrent.state.includes('queued')) {
            color = 0xF1C40F; // Jaune
            stateEmoji = '‚è≥';
            stateText = 'En attente';
          } else if (torrent.state.includes('error')) {
            color = 0xE74C3C; // Rouge
            stateEmoji = '‚ùå';
            stateText = 'Erreur';
          } else {
            color = 0x95A5A6; // Gris
            stateEmoji = '‚ùì';
            stateText = torrent.state;
          }
          
          // Cr√©er une barre de progression
          const progressBar = createProgressBar(torrent.progress);
          
          // Calculer le temps restant
          let etaText;
          if (torrent.progress === 1) {
            etaText = 'Termin√©';
          } else if (torrent.eta === 8640000) {
            etaText = '‚àû';
          } else if (torrent.eta > 0) {
            const hours = Math.floor(torrent.eta / 3600);
            const minutes = Math.floor((torrent.eta % 3600) / 60);
            etaText = `${hours}h ${minutes}m`;
          } else {
            etaText = 'Inconnu';
          }
          
          // Cr√©er l'embed
          const embed = new EmbedBuilder()
            .setColor(color)
            .setTitle(`${stateEmoji} ${torrent.name.substring(0, 200)}${torrent.name.length > 200 ? '...' : ''}`)
            .setDescription(`**√âtat**: ${stateText}\n**Progression**: ${progressBar} ${(torrent.progress * 100).toFixed(1)}%`)
            .addFields(
              { name: 'üìä Informations', value: `‚Ä¢ Taille: ${formatSize(torrent.size)}\n‚Ä¢ T√©l√©charg√©: ${formatSize(torrent.completed)}\n‚Ä¢ Ratio: ${torrent.ratio.toFixed(2)}`, inline: true },
              { name: 'üîÑ Vitesses', value: `‚Ä¢ ‚¨áÔ∏è ${formatSpeed(torrent.dlspeed)}\n‚Ä¢ ‚¨ÜÔ∏è ${formatSpeed(torrent.upspeed)}\n‚Ä¢ ETA: ${etaText}`, inline: true }
            )
            .setFooter({ text: `Hash: ${torrent.hash.substring(0, 8)}...` })
            .setTimestamp();
          
          // Ajouter des informations suppl√©mentaires si disponibles
          if (torrent.num_seeds !== undefined && torrent.num_leechs !== undefined) {
            embed.addFields({ 
              name: 'üë• Connexions', 
              value: `‚Ä¢ Seeds: ${torrent.num_seeds}\n‚Ä¢ Peers: ${torrent.num_leechs}`, 
              inline: true 
            });
          }

          // Envoyer l'embed
          console.log(`Envoi de l'embed pour ${torrent.name}`);
          const sentMessage = await message.channel.send({ embeds: [embed] });

          // Ajouter les r√©actions pour les contr√¥les
          await sentMessage.react('‚ñ∂Ô∏è'); // Play
          await sentMessage.react('‚è∏Ô∏è'); // Pause
          await sentMessage.react('‚è©'); // Force Start
          await sentMessage.react('üîç'); // D√©tails
          await sentMessage.react('üóëÔ∏è'); // Delete
          console.log(`R√©actions ajout√©es pour ${torrent.name}`);

          // Gestion des r√©actions
          const filter = (reaction, user) => {
            return ['‚ñ∂Ô∏è', '‚è∏Ô∏è', '‚è©', 'üîç', 'üóëÔ∏è'].includes(reaction.emoji.name) &&
                   user.id === message.author.id;
          };

          const collector = sentMessage.createReactionCollector({ filter, time: 300000 }); // 5 minutes
          allCollectors.push(collector);
          console.log(`Collecteur cr√©√© pour ${torrent.name}`);

          // Nettoyer le collecteur √† la fin
          collector.on('end', () => {
            // Supprimer les r√©actions si possible
            if (!sentMessage.deleted) {
              sentMessage.reactions.removeAll().catch(error => console.error('Impossible de supprimer les r√©actions:', error));
            }
          });

          collector.on('collect', async (reaction, user) => {
            try {
              console.log(`R√©action ${reaction.emoji.name} collect√©e pour ${torrent.name}`);
              
              // Supprimer la r√©action de l'utilisateur pour une meilleure UX
              reaction.users.remove(user).catch(error => console.error('Impossible de supprimer la r√©action:', error));
              
              switch (reaction.emoji.name) {
                case '‚ñ∂Ô∏è': 
                  await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/resume`, `hashes=${torrent.hash}`, {
                    headers: { 'Cookie': `SID=${SID}` }
                  });
                  await sentMessage.reply({ content: `‚úÖ Torrent **${torrent.name}** repris`, ephemeral: true });
                  break;
                  
                case '‚è∏Ô∏è': 
                  await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/pause`, `hashes=${torrent.hash}`, {
                    headers: { 'Cookie': `SID=${SID}` }
                  });
                  await sentMessage.reply({ content: `‚è∏Ô∏è Torrent **${torrent.name}** mis en pause`, ephemeral: true });
                  break;
                  
                case '‚è©': 
                  await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/setForceStart`, `hashes=${torrent.hash}&value=true`, {
                    headers: { 'Cookie': `SID=${SID}` }
                  });
                  await sentMessage.reply({ content: `‚è© D√©marrage forc√© activ√© pour **${torrent.name}**`, ephemeral: true });
                  break;
                  
                case 'üîç':
                  // G√©n√©rer la vue d√©taill√©e
                  const detailedView = await getDetailedTorrentView(torrent);
                  if (detailedView && detailedView.embeds) {
                    const reply = await message.channel.send({ embeds: detailedView.embeds });
                    
                    // Enregistrer le message pour les mises √† jour automatiques
                    if (detailedView.registerMessage && typeof detailedView.registerMessage === 'function') {
                      detailedView.registerMessage(reply);
                    }
                  } else {
                    await sentMessage.reply('‚ùå Erreur lors de la g√©n√©ration de la vue d√©taill√©e');
                  }
                  break;
                  
                case 'üóëÔ∏è': 
                  // Demander confirmation
                  const confirmMsg = await sentMessage.reply('‚ö†Ô∏è **√ätes-vous s√ªr de vouloir supprimer ce torrent ?** (R√©pondez "oui" pour confirmer)');
                  
                  // Cr√©er un collecteur pour la confirmation
                  const confirmFilter = m => m.author.id === user.id && m.content.toLowerCase() === 'oui';
                  const confirmCollector = message.channel.createMessageCollector({ filter: confirmFilter, time: 30000, max: 1 });
                  
                  confirmCollector.on('collect', async () => {
                    await axios.post(`${QBITTORRENT_HOST}/api/v2/torrents/delete`, `hashes=${torrent.hash}&deleteFiles=false`, {
                headers: { 'Cookie': `SID=${SID}` }
              });
                    await sentMessage.reply('üóëÔ∏è Torrent supprim√©');
                    
                    // Mettre √† jour l'embed pour montrer que le torrent a √©t√© supprim√©
                    const updatedEmbed = EmbedBuilder.from(sentMessage.embeds[0])
                      .setColor(0xFF0000)
                      .setDescription('**SUPPRIM√â**\n' + sentMessage.embeds[0].description);
                    
                    await sentMessage.edit({ embeds: [updatedEmbed] });
                    
                    // Supprimer les r√©actions
                    sentMessage.reactions.removeAll().catch(error => console.error('Impossible de supprimer les r√©actions:', error));
                  });
                  
                  confirmCollector.on('end', collected => {
                    if (collected.size === 0) {
                      confirmMsg.edit('‚ùå Suppression annul√©e (d√©lai expir√©)');
                    }
                  });
                  break;
              }
            } catch (error) {
              console.error('Erreur action:', error);
              sentMessage.reply(`‚ùå Erreur lors de l'action "${reaction.emoji.name}"`);
            }
          });
        }

        // Ajouter un message pour arr√™ter tous les collecteurs apr√®s 5 minutes
        setTimeout(() => {
          allCollectors.forEach(collector => {
            if (!collector.ended) collector.stop();
          });
          console.log('Tous les collecteurs ont √©t√© arr√™t√©s');
        }, 300000); // 5 minutes
        
        // Envoyer un message r√©capitulatif
        const statsEmbed = new EmbedBuilder()
          .setColor(0x9B59B6)
          .setTitle('üìä R√©sum√© des Torrents')
          .setDescription(`${torrents.length} torrents affich√©s`)
          .addFields(
            { 
              name: 'üìà Statistiques', 
              value: `‚Ä¢ En t√©l√©chargement: ${torrents.filter(t => t.state.includes('downloading')).length}
‚Ä¢ En upload: ${torrents.filter(t => t.state.includes('uploading')).length}
‚Ä¢ Termin√©s: ${torrents.filter(t => t.progress === 1).length}
‚Ä¢ En pause: ${torrents.filter(t => t.state.includes('paused')).length}` 
            },
            {
              name: 'üîÑ Vitesses Globales',
              value: `‚Ä¢ ‚¨áÔ∏è ${formatSpeed(torrents.reduce((acc, t) => acc + t.dlspeed, 0))}
‚Ä¢ ‚¨ÜÔ∏è ${formatSpeed(torrents.reduce((acc, t) => acc + t.upspeed, 0))}`
            }
          )
          .setFooter({ text: 'Les r√©actions seront disponibles pendant 5 minutes' })
          .setTimestamp();
        
        await message.channel.send({ embeds: [statsEmbed] });
        } else {
        await message.reply('Aucun torrent actif.');
        console.log('Aucun torrent actif trouv√©');
        }
      } catch (error) {
      console.error('Erreur API:', error.response?.data || error.message);
      await message.reply('‚ùå Erreur API - V√©rifiez les logs');
    }
  }
  
  // Commande !status - Ex√©cute le script discord_notify.sh pour obtenir le statut du Raspberry Pi
  else if (message.content.startsWith('!status')) {
    try {
      console.log('Commande !status re√ßue - Ex√©cution du script discord_notify.sh');
      
      // Ex√©cuter le script discord_notify.sh avec l'argument "status"
      exec('/home/Jaafar/discord_notify.sh status', async (error, stdout, stderr) => {
        if (error) {
          console.error(`Erreur d'ex√©cution du script: ${error}`);
          await message.reply(`‚ùå Erreur lors de l'ex√©cution du script: ${error.message}`);
          return;
        }
        
        if (stderr) {
          console.error(`Erreur du script: ${stderr}`);
        }
        
        // Si le script ne renvoie pas de sortie, envoyer un message par d√©faut
        if (!stdout || stdout.trim() === '') {
          await message.reply('‚úÖ Commande ex√©cut√©e, mais aucune sortie n\'a √©t√© produite.');
    } else {
          // Envoyer la sortie du script
          await message.reply(`üìä **Statut du Raspberry Pi**\n\n${stdout}`);
        }
      });
    } catch (error) {
      console.error('Erreur lors de l\'ex√©cution de la commande !status:', error);
      await message.reply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande');
    }
  }
  
  // Commande !torrentstatus - Version simplifi√©e de !statustorrent (anciennement !status)
  else if (message.content.startsWith('!torrentstatus')) {
    try {
      console.log('Commande !torrentstatus re√ßue');
      
      // V√©rifier la connexion
      if (!SID || !(await checkSession())) {
        const loggedIn = await loginToQBittorrent();
        if (!loggedIn) {
          await message.reply('‚ùå Connexion √† qBittorrent √©chou√©e');
          return;
        }
      }

      // R√©cup√©rer les infos des torrents
      const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/info`, {
        headers: { 'Cookie': `SID=${SID}` }
      });

      if (response.status === 200 && response.data.length > 0) {
        console.log(`${response.data.length} torrents trouv√©s`);
        
        // Cr√©er un embed pour tous les torrents
        const embed = new EmbedBuilder()
          .setColor(0x0099FF)
          .setTitle('üìä √âtat des Torrents')
          .setDescription(`${response.data.length} torrents trouv√©s`)
          .setTimestamp();
        
        // Ajouter les torrents actifs
        const activeTorrents = response.data.filter(t => 
          t.state === 'downloading' || t.state === 'stalledDL' || t.state === 'metaDL' || t.state === 'uploading'
        );
        
        if (activeTorrents.length > 0) {
          let activeText = '';
          for (const torrent of activeTorrents.slice(0, 10)) { // Limiter √† 10 pour √©viter les messages trop longs
            activeText += `‚Ä¢ **${torrent.name.substring(0, 40)}${torrent.name.length > 40 ? '...' : ''}**\n`;
            activeText += `  ${(torrent.progress * 100).toFixed(1)}% | ‚¨áÔ∏è ${formatSpeed(torrent.dlspeed)} | ‚¨ÜÔ∏è ${formatSpeed(torrent.upspeed)}\n`;
          }
          
          if (activeTorrents.length > 10) {
            activeText += `... et ${activeTorrents.length - 10} autres torrents actifs`;
          }
          
          embed.addFields({ name: `‚ö° Torrents Actifs (${activeTorrents.length})`, value: activeText || 'Aucun torrent actif' });
        }
        
        // Ajouter les statistiques globales
        const totalDownloadSpeed = response.data.reduce((acc, t) => acc + t.dlspeed, 0);
        const totalUploadSpeed = response.data.reduce((acc, t) => acc + t.upspeed, 0);
        const totalSize = response.data.reduce((acc, t) => acc + t.size, 0);
        
        embed.addFields({ 
          name: 'üìà Statistiques Globales', 
          value: `‚Ä¢ Torrents: ${response.data.length}\n‚Ä¢ Taille totale: ${formatSize(totalSize)}\n‚Ä¢ Vitesse ‚¨áÔ∏è: ${formatSpeed(totalDownloadSpeed)}\n‚Ä¢ Vitesse ‚¨ÜÔ∏è: ${formatSpeed(totalUploadSpeed)}` 
        });
        
        await message.channel.send({ embeds: [embed] });
        } else {
        await message.reply('Aucun torrent actif.');
        }
    } catch (error) {
      console.error('Erreur API:', error.response?.data || error.message);
      await message.reply('‚ùå Erreur API - V√©rifiez les logs');
    }
  }

  // Commande !list - Liste tous les torrents
  else if (message.content.startsWith('!list')) {
    try {
      console.log('Commande !list re√ßue');
      
      // V√©rifier la connexion
      if (!SID || !(await checkSession())) {
        const loggedIn = await loginToQBittorrent();
        if (!loggedIn) {
          await message.reply('‚ùå Connexion √† qBittorrent √©chou√©e');
          return;
        }
      }

      // R√©cup√©rer les infos des torrents
      const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/info`, {
        headers: { 'Cookie': `SID=${SID}` }
      });

      if (response.status === 200 && response.data.length > 0) {
        console.log(`${response.data.length} torrents trouv√©s`);
        
        // Trier les torrents par √©tat
        const torrents = response.data.sort((a, b) => {
          // Priorit√©: downloading > uploading > completed > autres
          const stateOrder = {
            'downloading': 0,
            'stalledDL': 1,
            'metaDL': 2,
            'uploading': 3,
            'stalledUP': 4,
            'pausedDL': 5,
            'pausedUP': 6,
            'queuedDL': 7,
            'queuedUP': 8,
            'error': 9,
            'missingFiles': 10,
            'unknown': 11
          };
          
          return (stateOrder[a.state] || 99) - (stateOrder[b.state] || 99);
        });
        
        // Cr√©er des messages par groupes de 10 torrents
        const chunks = [];
        for (let i = 0; i < torrents.length; i += 10) {
          chunks.push(torrents.slice(i, i + 10));
        }
        
        for (let i = 0; i < chunks.length; i++) {
          const embed = new EmbedBuilder()
            .setColor(0x0099FF)
            .setTitle(`üìã Liste des Torrents (${i+1}/${chunks.length})`)
            .setTimestamp();
          
          let description = '';
          for (const torrent of chunks[i]) {
            // Emoji en fonction de l'√©tat
            let stateEmoji;
            if (torrent.state.includes('downloading')) stateEmoji = '‚¨áÔ∏è';
            else if (torrent.state.includes('uploading')) stateEmoji = '‚¨ÜÔ∏è';
            else if (torrent.progress === 1) stateEmoji = '‚úÖ';
            else if (torrent.state.includes('paused')) stateEmoji = '‚è∏Ô∏è';
            else if (torrent.state.includes('queued')) stateEmoji = '‚è≥';
            else if (torrent.state.includes('error')) stateEmoji = '‚ùå';
            else stateEmoji = '‚ùì';
            
            description += `${stateEmoji} **${torrent.name.substring(0, 50)}${torrent.name.length > 50 ? '...' : ''}**\n`;
            description += `   ${(torrent.progress * 100).toFixed(1)}% | ${formatSize(torrent.size)} | Ratio: ${torrent.ratio.toFixed(2)}\n\n`;
          }
          
          embed.setDescription(description);
          await message.channel.send({ embeds: [embed] });
        }
      } else {
        await message.reply('Aucun torrent trouv√©.');
      }
    } catch (error) {
      console.error('Erreur API:', error.response?.data || error.message);
      await message.reply('‚ùå Erreur API - V√©rifiez les logs');
    }
  }
  
  // Commande !detail - Affiche les d√©tails d'un torrent sp√©cifique
  else if (message.content.startsWith('!detail')) {
    try {
      console.log('Commande !detail re√ßue');
      
      // Extraire le nom ou l'index du torrent
      const args = message.content.split(' ').slice(1);
      if (args.length === 0) {
        return message.reply('‚ùå Veuillez sp√©cifier un nom ou un num√©ro de torrent. Exemple: `!detail 1` ou `!detail nom_du_torrent`');
      }
      
      // V√©rifier la connexion
      if (!SID || !(await checkSession())) {
        const loggedIn = await loginToQBittorrent();
        if (!loggedIn) {
          await message.reply('‚ùå Connexion √† qBittorrent √©chou√©e');
          return;
        }
      }

      // R√©cup√©rer les infos des torrents
      const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/info`, {
                headers: { 'Cookie': `SID=${SID}` }
              });

      if (response.status === 200 && response.data.length > 0) {
        console.log(`${response.data.length} torrents trouv√©s`);
        
        let selectedTorrent;
        
        // Si l'argument est un nombre, utiliser comme index
        if (!isNaN(args[0]) && parseInt(args[0]) > 0 && parseInt(args[0]) <= response.data.length) {
          selectedTorrent = response.data[parseInt(args[0]) - 1];
        } else {
          // Sinon, rechercher par nom
          const searchTerm = args.join(' ').toLowerCase();
          selectedTorrent = response.data.find(t => 
            t.name.toLowerCase().includes(searchTerm)
          );
        }
        
        if (selectedTorrent) {
          console.log(`Torrent trouv√©: ${selectedTorrent.name}`);
          
          // G√©n√©rer la vue d√©taill√©e
          const detailedView = await getDetailedTorrentView(selectedTorrent);
          
          if (detailedView && detailedView.embeds) {
            const reply = await message.channel.send({ embeds: detailedView.embeds });
            
            // Enregistrer le message pour les mises √† jour automatiques
            if (detailedView.registerMessage && typeof detailedView.registerMessage === 'function') {
              detailedView.registerMessage(reply);
        }
      } else {
            await message.reply('‚ùå Erreur lors de la g√©n√©ration de la vue d√©taill√©e');
          }
        } else {
          await message.reply('‚ùå Torrent non trouv√©. V√©rifiez le nom ou le num√©ro.');
        }
      } else {
        await message.reply('Aucun torrent trouv√©.');
      }
    } catch (error) {
      console.error('Erreur API:', error.response?.data || error.message);
      await message.reply('‚ùå Erreur API - V√©rifiez les logs');
    }
  }
  
  // Commande !disk - Affiche l'espace disque
  else if (message.content.startsWith('!disk')) {
    try {
      console.log('Commande !disk re√ßue');
      
      // Ex√©cuter la commande df pour obtenir l'espace disque
      const { stdout } = await new Promise((resolve, reject) => {
        exec(`df -h ${config.bot.defaultSavePath}`, (error, stdout, stderr) => {
          if (error) reject(error);
          else resolve({ stdout, stderr });
        });
      });
      
      // Analyser la sortie pour obtenir les informations
      const lines = stdout.trim().split('\n');
      if (lines.length < 2) throw new Error('Format de sortie df inattendu');
      
      const headers = lines[0].split(/\s+/).filter(Boolean);
      const diskInfo = lines[1].split(/\s+/).filter(Boolean);
      
      // Cr√©er un embed avec les informations
      const embed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('üíæ Informations Espace Disque')
        .addFields(
          { name: 'Syst√®me de fichiers', value: diskInfo[0], inline: true },
          { name: 'Taille', value: diskInfo[1], inline: true },
          { name: 'Utilis√©', value: diskInfo[2], inline: true },
          { name: 'Disponible', value: diskInfo[3], inline: true },
          { name: 'Utilisation', value: diskInfo[4], inline: true },
          { name: 'Point de montage', value: diskInfo[5], inline: true }
        )
        .setTimestamp();
      
      // Ajouter une barre de progression
      const usagePercent = parseInt(diskInfo[4].replace('%', ''));
      let progressBar = '';
      const barLength = 20;
      const filledLength = Math.round(barLength * usagePercent / 100);
      
      for (let i = 0; i < barLength; i++) {
        if (i < filledLength) {
          progressBar += '‚ñà';
        } else {
          progressBar += '‚ñë';
        }
      }
      
      // Couleur en fonction de l'utilisation
      let color;
      if (usagePercent >= 90) color = 'üî¥';
      else if (usagePercent >= 70) color = 'üü†';
      else color = 'üü¢';
      
      embed.addFields({ name: 'Utilisation', value: `${color} ${progressBar} ${usagePercent}%` });
      
      await message.channel.send({ embeds: [embed] });
    } catch (error) {
      console.error('Erreur lors de la v√©rification de l\'espace disque:', error);
      await message.reply('‚ùå Erreur lors de la v√©rification de l\'espace disque');
    }
  }
  
  // Commande !help - Affiche l'aide
  else if (message.content.startsWith('!help')) {
    const embed = new EmbedBuilder()
      .setColor(0x0099FF)
      .setTitle('üìö Aide du Bot qBittorrent')
      .setDescription('Voici les commandes disponibles:')
      .addFields(
        { name: '!status', value: 'Affiche le statut du Raspberry Pi (temp√©rature, espace disque, uptime)' },
        { name: '!torrentstatus', value: 'Affiche un r√©sum√© de l\'√©tat des torrents' },
        { name: '!list', value: 'Liste tous les torrents avec leurs d√©tails' },
        { name: '!statustorrent', value: 'Affiche chaque torrent avec des boutons de contr√¥le' },
        { name: '!detail <nom/num√©ro>', value: 'Affiche les d√©tails d\'un torrent sp√©cifique' },
        { name: '!disk', value: 'Affiche les informations d\'espace disque' },
        { name: '!config', value: 'Affiche la configuration actuelle du bot' },
        { name: '!help', value: 'Affiche ce message d\'aide' },
        { name: 'Fichiers .torrent', value: 'Envoyez un fichier .torrent dans le canal pour l\'ajouter √† qBittorrent (avec confirmation)' }
      )
      .setTimestamp();
    
    await message.channel.send({ embeds: [embed] });
  }
  
  // Commande !config - Affiche la configuration
  else if (message.content.startsWith('!config')) {
    try {
      const configText = formatConfig(config);
      await message.channel.send(configText);
    } catch (error) {
      console.error('Erreur lors de l\'affichage de la configuration:', error);
      await message.reply('‚ùå Erreur lors de l\'affichage de la configuration');
    }
  }
});

// Map pour stocker les messages de vue d√©taill√©e
const detailedViewMessages = new Map();

// Fonction pour obtenir les fichiers d'un torrent
async function getTorrentFiles(hash) {
  try {
    const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/files?hash=${hash}`, {
      headers: { 'Cookie': `SID=${SID}` }
    });
    
    return response.data;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des fichiers:', error);
    return null;
  }
}

// Fonction pour obtenir les trackers d'un torrent
async function getTorrentTrackers(hash) {
  try {
    const response = await axios.get(`${QBITTORRENT_HOST}/api/v2/torrents/trackers?hash=${hash}`, {
      headers: { 'Cookie': `SID=${SID}` }
    });
    
    return response.data;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des trackers:', error);
    return null;
  }
}

// Fonction pour cr√©er une barre de progression visuelle
function createProgressBar(progress, length = 15) {
  const filledLength = Math.round(length * progress);
  let bar = '';
  
  // Caract√®res pour une barre de progression plus esth√©tique
  const emptyChar = '‚ñë';
  const filledChar = '‚ñà';
  
  for (let i = 0; i < length; i++) {
    if (i < filledLength) {
      bar += filledChar;
    } else {
      bar += emptyChar;
    }
  }
  
  return bar;
}

// Mettre √† jour la configuration pour d√©sactiver l'affichage des trackers et des peers
if (config.bot.detailedView) {
  config.bot.detailedView.showTrackers = false;
  config.bot.detailedView.showPeers = false;
  
  // Sauvegarder la configuration mise √† jour
  saveConfig();
  console.log('Configuration mise √† jour: affichage des trackers et des peers d√©sactiv√©');
}